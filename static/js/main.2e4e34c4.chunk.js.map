{"version":3,"sources":["images/001-sunny.png","images/050-rain.png","images/007-thunder.png","images/008-snow.png","images/027-tree.png","images/006-storm.png","images/016-cloudy.png","Weather.jsx","App.jsx","index.js"],"names":["Weather","useState","location","setLocation","search","setsearch","country","setcountry","flag","setflag","web","image","setImage","onSuccess","position","a","long","coords","longitude","lat","latitude","fetchApi","fetch","response1","json","jsonval","console","table","sys","name","alert","onError","err","log","useEffect","navigator","geolocation","getCurrentPosition","url","response","resJson","cod","id","weather","i5","i1","i2","i3","i4","i6","main","temp","className","type","onChange","e","target","value","placeholder","required","autoComplete","src","alt","App","ReactDOM","render","document","getElementById"],"mappings":"sMAAe,MAA0B,sCCA1B,MAA0B,qCCA1B,MAA0B,wCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,sCCA1B,MAA0B,uC,OCmH1BA,EAxGC,WAEZ,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwBN,oBAAS,GAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAA0BR,mBAASS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAS,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DAGZC,EAAKF,EAASG,OAAOC,UACrBC,EAAML,EAASG,OAAOG,SAJV,SAMFC,EANE,8DAMgEF,EANhE,gBAM2EH,EAN3E,oDAOgBM,MAAMD,GAPtB,cAOFE,EAPE,gBAQcA,EAAUC,OARxB,OAQFC,EARE,OASRC,QAAQC,MAAMF,EAAQG,IAAItB,SAC1BD,EAAUoB,EAAQI,MAClB1B,EAAYsB,EAAQI,MACpBtB,EAAWkB,EAAQG,IAAItB,SAZf,kDAeRwB,MAAM,+BAfE,0DAAD,sDAkBTC,EAAU,SAACC,GACbN,QAAQO,IAAID,IAEhBE,qBAAU,WACNC,UAAUC,YAAYC,mBAAmBxB,EAAUkB,KACrD,IAEFG,qBAAU,YACQ,uCAAG,kCAAAnB,EAAA,sEAEHuB,EAFG,4DAEwDlC,EAFxD,iEAGckB,MAAMgB,GAHpB,cAGHC,EAHG,gBAIaA,EAASf,OAJtB,QAIHgB,EAJG,QAKGC,IAAM,QACVC,EAAKF,EAAQG,QAAQ,GAAGD,IAEtB,KAAOA,EAAG,KACZ9B,EAASgC,GAEVF,EAAG,KAAOA,EAAG,KACZ9B,EAASiC,GAEVH,EAAG,KAAOA,EAAG,KACZ9B,EAASkC,GAGVJ,EAAG,KAAOA,EAAG,KACZ9B,EAASmC,GAEVL,EAAG,KAAOA,EAAG,KACZ9B,EAASoC,GAEL,MAALN,GACC9B,EAASF,GAEVgC,EAAG,KACF9B,EAASqC,GAEb9C,EAAYqC,EAAQU,KAAKC,MACzB5C,EAAWiC,EAAQZ,IAAItB,SACvBG,GAAQ,IAGRA,GAAQ,GAnCH,kDAuCTiB,QAAQO,IAAR,MAvCS,0DAAH,qDA0CdZ,KACF,CAACjB,IAKH,OACI,mCACI,sBAAKgD,UAAU,MAAf,UACI,qBAAKA,UAAU,YAAf,SACI,uBAAOC,KAAK,SAASD,UAAU,aAC3BE,SATD,SAACC,GAChBlD,EAAUkD,EAAEC,OAAOC,QASHC,YAAY,iBAAiBD,MAAOrD,EAAQuD,UAAQ,EAACC,aAAa,WAG9D,IAAPpD,EACG,+CAEA,sBAAK4C,UAAU,YAAf,UACQ,qBAAIA,UAAU,WAAd,UAA0BhD,EAA1B,IAAmCE,KAC3C,qBAAK8C,UAAU,QAAQS,IAAKlD,EAAOmD,IAAI,SAC/B,qBAAIV,UAAU,OAAd,UAAsBlD,EAAtB,qBC/FjB6D,EATH,WACR,OACI,mCACI,cAAC,EAAD,OCDZC,IAASC,OACN,cAAC,EAAD,IACDC,SAASC,eAAe,W","file":"static/js/main.2e4e34c4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/001-sunny.dd80d7e3.png\";","export default __webpack_public_path__ + \"static/media/050-rain.7f16e1a8.png\";","export default __webpack_public_path__ + \"static/media/007-thunder.0f86a361.png\";","export default __webpack_public_path__ + \"static/media/008-snow.f118941d.png\";","export default __webpack_public_path__ + \"static/media/027-tree.f00b6f7a.png\";","export default __webpack_public_path__ + \"static/media/006-storm.9858cd2c.png\";","export default __webpack_public_path__ + \"static/media/016-cloudy.d9f9dbc3.png\";","import React, { useEffect, useState } from 'react';\r\nimport web from './images/001-sunny.png';\r\nimport i1 from './images/050-rain.png';\r\nimport i2 from './images/007-thunder.png';\r\nimport i3 from './images/008-snow.png';\r\nimport i4 from './images/027-tree.png';\r\nimport i5 from './images/006-storm.png';\r\nimport i6 from './images/016-cloudy.png';\r\n\r\n\r\n\r\nconst Weather = () => {\r\n\r\n    const [location, setLocation] = useState(\"\");\r\n    const [search, setsearch] = useState(\"\");\r\n    const [country, setcountry] = useState(\"\");\r\n    const [flag, setflag] = useState(false);\r\n    const [image, setImage] = useState(web);\r\n    const onSuccess=async(position)=> {\r\n        let long;\r\n        let lat;\r\n        long=position.coords.longitude;\r\n        lat = position.coords.latitude;\r\n        try {\r\n            const fetchApi = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=408c29a5868f31d539097c662762c8ca`;\r\n            const response1 = await fetch(fetchApi);\r\n            const jsonval = await response1.json();\r\n            console.table(jsonval.sys.country);\r\n            setsearch(jsonval.name)\r\n            setLocation(jsonval.name);\r\n            setcountry(jsonval.sys.country);\r\n        }\r\n        catch (err) {\r\n            alert(\"Allow Location Permission!!\");\r\n        }\r\n    }\r\n    const onError = (err) => {\r\n        console.log(err);\r\n    }\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(onSuccess,onError);\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            try {\r\n                const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=408c29a5868f31d539097c662762c8ca`;\r\n                const response = await fetch(url);\r\n                const resJson = await response.json();\r\n                if (resJson.cod < \"400\") {\r\n                    let id = resJson.weather[0].id;\r\n\r\n                    if(id<300 && id>200){\r\n                        setImage(i5);\r\n                    }\r\n                    if(id<400 && id>300){\r\n                        setImage(i1);\r\n                    }\r\n                    if(id<600 && id>500){\r\n                        setImage(i2);\r\n                    }\r\n    \r\n                    if(id<700 && id>600){\r\n                        setImage(i3);\r\n                    }\r\n                    if(id<800 && id>700){\r\n                        setImage(i4);\r\n                    }\r\n                    if(id===800){\r\n                        setImage(web);\r\n                    }\r\n                    if(id>800){\r\n                        setImage(i6);\r\n                    }\r\n                    setLocation(resJson.main.temp);\r\n                    setcountry(resJson.sys.country);\r\n                    setflag(true);\r\n                }\r\n                else {\r\n                    setflag(false);\r\n                }\r\n            }\r\n            catch(err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        fetchApi()\r\n    },[search])\r\n    const inputEvent = (e) => {\r\n        setsearch(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='box'>\r\n                <div className=\"inputData\">\r\n                    <input type=\"search\" className=\"inputfield\"\r\n                        onChange={inputEvent}\r\n                        placeholder=\"Enter location\" value={search} required autoComplete=\"off\" />\r\n                </div>\r\n                {\r\n                    (flag===false)? (\r\n                        <p> No data found</p>\r\n                    ) : (\r\n                        <div className=\"container\">\r\n                                <h2 className=\"location\">{search},{country}</h2>\r\n                        <img className=\"image\" src={image} alt=\"icon\"/>\r\n                                <h1 className=\"temp\">{location} Â°C</h1>\r\n                       </div>\r\n                    )\r\n                }\r\n           </div>\r\n        </>\r\n    )\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport Weather from './Weather';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <Weather />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n   <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}